# Configuration file of install.softwares(Github)
title = "Github Configuration File"
[github_demo]
github_url = "https://github.com/Miachol/github_demo"
use_git2r = true
make_dir = ["./"]
bin_dir = ["./"]

[bwa]
github_url = "https://github.com/lh3/bwa"
version_order_fixed = true
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[bwa.install]
linux = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/bwa {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/bwa {{destdir}}/bin"

[star]
github_url = "https://github.com/alexdobin/STAR"
make_dir = ['source', "./"]

[star.bin_dir]
linux = "{{destdir}}/bin"
mac = "{{destdir}}/bin"

[star.install]
linux = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/Linux_x86_64/* {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/MacOSX_x86_64/* {{destdir}}/bin"

[samtools_old]
github_url = "https://github.com/samtools/samtools"
version_newest = "0.1.9"
version_available = ["0.1.1", "0.1.10", "0.1.11", "0.1.12", "0.1.12a", "0.1.13", "0.1.14", "0.1.15", "0.1.16", "0.1.17", "0.1.18", "0.1.19", "0.1.2-svntag", "0.1.2-tarball", "0.1.20", "0.1.3", "0.1.4", "0.1.5", "0.1.5a", "0.1.5b", "0.1.5c", "0.1.6", "0.1.7", "0.1.7a", "0.1.8", "0.1.9"]
version_fixed = true
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[samtools_old.install]
linux = "make && mkdir -p {{destdir}}/bin; cp samtools {{destdir}}/bin/samtools_{{version}}"
mac = "make && mkdir -p {{destdir}}/bin; cp samtools {{destdir}}/bin/samtools_{{version}}"

[bcftools]
github_url = "https://github.com/samtools/bcftools"
dependence = ["htslib"]
dependence_version = ["{{version}}"]
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[bcftools.install]
linux = "sed -i 's;HTSDIR = ../htslib;HTSDIR = {{htslib:source.dir}};' Makefile; make; mkdir -p {{destdir}}/bin; cp bcftools {{destdir}}/bin"
mac = "sed -i 's;HTSDIR = ../htslib;HTSDIR = {{htslib:source.dir}};' Makefile; make; mkdir -p {{destdir}}/bin; cp bcftools {{destdir}}/bin"

[bowtie]
github_url = "https://github.com/BenLangmead/bowtie"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[bowtie.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"


[bowtie2]
github_url = "https://github.com/BenLangmead/bowtie2"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[bowtie2.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"

[tophat2]
github_url = "https://github.com/infphilo/tophat"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[tophat2.install]
linux = "sh autogen.sh && ./configure --prefix={{destdir}} && make && make install"
mac = "sh autogen.sh && ./configure --prefix={{destdir}} && make && make install"

[varscan2]
github_url = "https://github.com/Miachol/varscan"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[varscan2.install]
linux = "mkdir -p {{destdir}}/bin; cp `ls *.jar` {{destdir}}/bin"
mac = "mkdir -p {{destdir}}/bin; cp `ls *.jar` {{destdir}}/bin"

[picard]
github_url = "https://github.com/broadinstitute/picard"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[picard.install]
linux = "{{download.dir}}/gradlew shadowJar && mkdir {{destdir}}/bin; cp {{download.dir}}/build/libs/* {{destdir}}/bin"
mac = "{{download.dir}}/gradlew shadowJar && mkdir {{destdir}}/bin; cp {{download.dir}}/build/libs/* {{destdir}}/bin"

[vcftools]
github_url = "https://github.com/vcftools/vcftools"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[vcftools.install]
linux = "./autogen.sh && ./configure --prefix={{destdir}} && make && make install"
mac = "./autogen.sh && ./configure --prefix={{destdir}} && make && make install"

[pindel]
github_url = "https://github.com/genome/pindel"
dependence = ["htslib"]
dependence_version = ["1.3.2"]
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[pindel.install]
linux = "./INSTALL {{htslib:source.dir}}; mkdir {{destdir}}/bin; cp `ls -F {{download.dir}} |grep '*' | grep -v 'INSTALL'` {{destdir}}/bin"
mac = "./INSTALL {{htslib:source.dir}}; mkdir {{destdir}}/bin; cp `ls -F {{download.dir}} |grep '*' | grep -v 'INSTALL'` {{destdir}}/bin"

[lofreq]
github_url = "https://github.com/Miachol/lofreq"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin/"]

[lofreq.install]
linux = "mkdir -p {{destdir}}/bin; bindir={{download.dir}}/lofreq_star-2.1.2_linux-x86-64/bin; files=`ls $bindir/*`; cd $bindir; chmod +x $files; cp $files {{destdir}}/bin"
mac = "mkdir -p {{destdir}}/bin; bindir={{download.dir}}/lofreq_star-2.1.2_linux-x86-64/bin; files=`ls $bindir/*`; cd $bindir; chmod +x $files; cp $files {{destdir}}/bin"

[hisat2]
github_url = "https://github.com/infphilo/hisat2"
make_dir = ["./"]
bin_dir = ["{{download.dir}}"]

[hisat2.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"

[freebayes]
github_url = "https://github.com/ekg/freebayes"
use_git2r = false
recursive_clone = true
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[freebayes.install]
linux = ["make", "mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"]
mac = ["make", "mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"]

[macs]
github_url = "https://github.com/taoliu/MACS/"
make_dir = ["./"]
bin_dir = ["{{download.dir}}/bin"]

[macs.before_install]
linux = "pip install cython"
mac = "pip install cython"

[macs.install]
linux = "if [ -f setup_w_cython.py ]; then python setup_w_cython.py install; else python setup.py install ;fi"
mac = "if [ -f setup_w_cython.py ]; then python setup_w_cython.py install; else python setup.py install ;fi"

[bedtools]
github_url = "https://github.com/arq5x/bedtools2"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[bedtools.install]
linux = ["make", "mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"]
mac = ["make", "mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"]

[sparsehash]
github_url = "https://github.com/sparsehash/sparsehash"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[sparsehash.install]
linux = "sh autogen.sh && ./configure --prefix={{destdir}} && make && make install"
mac = "sh autogen.sh && ./configure --prefix={{destdir}} && make && make install"

[abyss]
github_url = "https://github.com/bcgsc/abyss"
dependence = ["sparsehash", "sqlite"]
dependence_version = ["sparsehash-2.0.3", "3170000"]
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[abyss.install]
linux = "sh autogen.sh && ./configure --enable-maxk=96 --prefix={{destdir}} --with-mpi --with-sqlite={{sqlite:install.dir}} CPPFLAGS=-I{{sparsehash:install.dir}}/include && make"
mac = "sh autogen.sh && ./configure --enable-maxk=96 --prefix={{destdir}} --with-mpi --with-sqlite={{sqlite:install.dir}} CPPFLAGS=-I{{sparsehash:install.dir}}/include && make"

[bamtools]
github_url = "https://github.com/pezmaster31/bamtools"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[bamtools.before_install]
linux = "mkdir build; cd build && cmake .."
mac = "mkdir build; cd build && cmake .."

[bamtools.install]
linux = ["cd build && make", "mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"]
mac = ["cd build && make", "mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"]

[breakdancer]
github_url = "https://github.com/genome/breakdancer"
use_git2r = false
make_dir = ["./"]
bin_dir = ["{{download.dir}}/build/bin"]

[breakdancer.before_install]
linux = ["mkdir build; cd build && cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_INSTALL_PREFIX=/usr/local"]
mac = ["mkdir build; cd build && cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_INSTALL_PREFIX=/usr/local"]

[breakdancer.install]
linux = "cd build && make && make install"
mac = "cd build && make && make install"

[htseq]
github_url = "https://github.com/simon-anders/htseq"
make_dir = ["./"]
bin_dir = ["{{download.dir}}/scripts"]

[htseq.before_install]
linux = ["pip install numpy", "pip install Cython", "pip install 'matplotlib>=1.4'"]
mac = ["pip install numpy", "pip install Cython", "pip install 'matplotlib>=1.4'"]

[htseq.install]
linux = "pip install ."
mac = "pip install ."

[seqtk]
github_url = "https://github.com/ndaniel/seqtk"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[seqtk.install]
linux = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/seqtk {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; cp {{download.dir}}/seqtk {{destdir}}/bin"

[delly]
github_url = "https://github.com/dellytools/delly"
use_git2r = false
recursive_clone = true
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[delly.install]
linux = "make all; mkdir -p {{destdir}}/bin; fn=`ls -F src|grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cd src; cp $fn {{destdir}}/bin"
mac = "make all; mkdir -p {{destdir}}/bin; fn=`ls -F src|grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cd src; cp $fn {{destdir}}/bin"

[tmap]
github_url = "git://github.com/iontorrent/TMAP"
use_git2r = false
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[tmap.before_install]
linux = ["git submodule init", " git submodule update"]
mac = ["git submodule init", " git submodule update"]

[tmap.install]
linux = ["git checkout -b {{version}} tmap.{{version}}", "git submodule update",
         "sh autogen.sh && ./configure --prefix={{destdir}} && make", "make install"]
mac = ["git checkout -b {{version}} tmap.{{version}}", "git submodule update",
         "sh autogen.sh && ./configure --prefix={{destdir}} && make", "make install"]

[somaticsniper]
github_url = "https://github.com/genome/somatic-sniper"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[somaticsniper.install]
linux = "mkdir build; cd build && cmake ../ && make deps && make -j && make test; mkdir -p {{destdir}}/bin; cp {{download.dir}}/build/bin/* {{destdir}}/bin"
mac = "mkdir build; cd build && cmake ../ && make deps && make -j && make test; mkdir -p {{destdir}}/bin; cp {{download.dir}}/build/bin/* {{destdir}}/bin"

[bamutil]
github_url = "https://github.com/statgen/bamUtil"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[bamutil.install]
linux = "make cloneLib && make && make install INSTALLDIR={{destdir}}"
mac = "make cloneLib && make && make install INSTALLDIR={{destdir}}"

[vcflib]
github_url = "https://github.com/vcflib/vcflib"
use_git2r = false
recursive_clone = true
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[vcflib.install]
linux = ["make", "mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"]
mac = ["make", "mkdir -p {{destdir}}/bin; cp {{download.dir}}/bin/* {{destdir}}/bin"]

[jvarkit]
github_url = "https://github.com/lindenb/jvarkit/"
make_dir = ["./"]
bin_dir = ["{{download.dir}}/dist"]

[jvarkit.install]
linux = ["make all", "mkdir -p {{destdir}}/bin; cp {{download.dir}}/dist/* {{destdir}}/bin"]
mac = ["make all", "mkdir -p {{destdir}}/bin; cp {{download.dir}}/dist/* {{destdir}}/bin"]

[fastx_toolkit]
github_url = "https://github.com/agordon/fastx_toolkit"
dependence = ["libgtextutils"]
dependence_version = ["0.7"]
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[fastx_toolkit.install]
linux = "export PKG_CONFIG_PATH=PKG_CONFIG_PATH:{{libgtextutils:source.dir}}; ./reconf && ./configure --prefix={{destdir}} && make && make install"
mac = "export PKG_CONFIG_PATH=PKG_CONFIG_PATH:{{libgtextutils:source.dir}}; ./reconf && ./configure --prefix={{destdir}} && make && make install"

[libgtextutils]
github_url = "https://github.com/agordon/libgtextutils"
make_dir = ["./"]
bin_dir = ["{{destdir}}/lib"]

[libgtextutils.install]
linux = "./reconf && ./configure --prefix={{destdir}} && make && make install"
mac = "./reconf && ./configure --prefix={{destdir}} && make && make install"

[trinityrnaseq]
github_url = "https://github.com/trinityrnaseq/trinityrnaseq"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[trinityrnaseq.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"

[oases]
github_url = "https://github.com/dzerbino/oases"
use_git2r = false
recursive_clone = true
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[oases.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"

[rum]
github_url = "https://github.com/itmat/rum"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[rum.install]
linux = ["cpan -i autodie", "cpan -i Log::Log4perl", "perl Makefile.PL INSTALL_BASE={{destdir}} && make", "make install"]
mac = ["cpan -i autodie", "cpan -i Log::Log4perl", "perl Makefile.PL INSTALL_BASE={{destdir}} && make", "make install"]

[igraph]
github_url = "https://github.com/igraph/igraph"
make_dir = ["./"]
bin_dir = ["{{destdir}}/lib"]

[igraph.install]
linux = "sh bootstrap.sh;./configure --prefix={{destdir}} && make && make install"
mac = "sh bootstrap.sh;./configure --prefix={{destdir}} && make && make install"

[pxz]
github_url = "https://github.com/jnovy/pxz"
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin"]

[pxz.install]
linux = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"
mac = "make && mkdir -p {{destdir}}/bin; fn=`ls -F |grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cp $fn {{destdir}}/bin"

[cnvkit]
github_url = "https://github.com/etal/cnvkit"
make_dir = ["./"]
bin_dir = ["{{download.dir}}"]

[cnvkit.install]
linux = "pip install ."
mac = "pip install ."

[speedseq]
github_url = "https://github.com/hall-lab/speedseq"
use_git2r = false
recursive_clone = true
dependence = ["root@6.03.04"]
dependence_version = ["6.03.04"]
make_dir = ["./"]
bin_dir = ["{{destdir}}/bin/speedseq"]
version_newest_fixed = "master"

[speedseq.install]
linux = "source ~/.bashrc; make; mkdir {{destdir}}/bin/speedseq; fn=`ls -F bin|grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cd bin; cp $fn {{destdir}}/bin/speedseq"
mac = "source ~/.bashrc; make; mkdir {{destdir}}/bin/speedseq; fn=`ls -F bin|grep '*' | tr -d '*'` fn=`echo $fn | tr ' ' '\n' |grep -v '.h' | grep -v '.cpp'|sort -u`;cd bin; cp $fn {{destdir}}/bin/speedseq"

[cnvnator]

github_url = "https://github.com/abyzovlab/CNVnator"
dependence = ["cnvnator_samtools", "root@6.03.04"]
dependence_version = ["1.3.1", "6.03.04"]
make_dir = ["./", "./src"]
bin_dir = ["{{destdir}}/bin"]

[cnvnator.install]
linux = "source ~/.bashrc; ln -s {{cnvnator_samtools:source.dir}} ./samtools; make; mkdir -p {{destdir}}/bin; cp cnvnator cnvnator2VCF.pl {{destdir}}/bin"
mac = "source ~/.bashrc; ln -s {{cnvnator_samtools:source.dir}} ./samtools; make; mkdir -p {{destdir}}/bin; cp cnvnator cnvnator2VCF.pl {{destdir}}/bin"

[asap]
github_url = "https://github.com/DeplanckeLab/ASAP"

[mdseq]
github_url = "https://github.com/zjdaye/MDSeq"
no.need.download = true

[mdseq.install]
linux = """#R#source('http://bioconductor.org/biocLite.R'); biocLite(c('edgeR', 'cqn'));
              library(devtools);install_github('zjdaye/MDSeq', ref = '{{version}}')#R#"""
mac = "#R#library(devtools);install_github('zjdaye/MDSeq', ref = '{{version}}')#R#"

[sclvm]
github_url = "https://github.com/PMBio/scLVM"
version_newest_fixed = "master"

[sclvm.install]
linux = 'pip install .'
mac = 'pip install .'

[fsclvm]
github_url = "https://github.com/PMBio/f-scLVM"

[fsclvm.install]
linux = 'pip install .'
mac = 'pip install .'

[bearscc]
github_url = "https://github.com/Miachol/bearscc"
make_dir = ["./package"]

[bearscc.install]
linux = "#R#install.packages('./', repos=NULL, type='source')#R#"
mac = "#R#install.packages('./', repos=NULL, type='source')#R#"

[singlesplice]
github_url = "https://github.com/jw156605/SingleSplice"
bin_dir = "./diffsplice/bin"

[singlesplice.install]
linux = 'make'
mac = 'make'

[isop]
github_url = "https://github.com/nghiavtr/ISOP"
no.need.download = true

[isop.install]
linux = "#R#library(devtools);install_github('nghiavtr/ISOP', ref='{{version}}')#R#"
mac = "#R#library(devtools);install_github('nghiavtr/ISOP', ref='{{version}}')#R#"

[brie]
github_url = "https://github.com/huangyh09/brie"

[brie.install]
linux = 'pip install .'
mac = 'pip install .'

[outrigger]
github_url = "https://github.com/YeoLab/outrigger"

[outrigger.install]
linux = 'pip install .'
mac = 'pip install .'

[raceid]
github_url = "https://github.com/dgrun/RaceID"

[backspin]
github_url = "https://github.com/linnarsson-lab/BackSPIN"
version_newest_fixed = "master"

[backspin.install]
linux = 'pip install .'
mac = 'pip install .'

[zifa]
github_url = "https://github.com/epierson9/ZIFA"

[zifa.install]
linux = 'pip install .'
mac = 'pip install .'

[seurat]
github_url = "https://github.com/satijalab/seurat"
no.need.download = true

[seurat.install]
linux = "#R#library(devtools);install_github('satijalab/seurat')#R#"
mac = "#R#library(devtools);install_github('satijalab/seurat')#R#"

[rca]
github_url = "https://github.com/GIS-SP-Group/RCA"
no.need.download = true

[rca.install]
linux = "#R#library(devtools);install_github('GIS-SP-Group/RCA', ref = '{{version}}')#R#"
mac = "#R#library(devtools);install_github('GIS-SP-Group/RCA', ref = '{{version}}')#R#"

[mimosca]
github_url = "https://github.com/asncd/MIMOSCA"

[tracer]
github_url = "https://github.com/teichlab/tracer"

[tracer.install]
linux = 'pip install .'
mac = 'pip install .'

[scnorm]
github_url = "https://github.com/rhondabacher/SCnorm"
no.need.download = true

[scnorm.install]
linux = "#R#library(devtools);install_github('rhondabacher/SCnorm', ref = '{{version}}')#R#"
mac = "#R#library(devtools);install_github('rhondabacher/SCnorm', ref = '{{version}}')#R#"

[sleuth]
github_url = "https://github.com/pachterlab/sleuth"
no.need.download = true

[sleuth.install]
linux = "#R#source('http://bioconductor.org/biocLite.R'); biocLite('rhdf5'); library(devtools); devtools::install_github('pachterlab/sleuth', ref = '{{version}}')#R#"
mac = "#R#source('http://bioconductor.org/biocLite.R'); biocLite('rhdf5'); library(devtools); devtools::install_github('pachterlab/sleuth', ref = '{{version}}')#R#"

[oncotator]
github_url = "https://github.com/broadinstitute/oncotator"

[oncotator.before_install]
linux = "pip install numpy && pip install pyvcf"
mac = "pip install numpy && pip install pyvcf"

[oncotator.install]
linux = 'pip install .'
mac = 'pip install .'

[vep]
github_url = "https://github.com/Ensembl/ensembl-vep"
make_dir = "ensembl-vep"
[vep.install]
linux = 'perl INSTALL.pl'
mac = 'perl INSTALL.pl'

[fastq_tools]
github_url = "https://github.com/dcjones/fastq-tools"

[fastq_tools.install]
linux = ["sh autogen.sh && ./configure --prefix={{destdir}} && make", "make install"]
mac = ["sh autogen.sh && ./configure --prefix={{destdir}} && make", "make install"]

[arnapipe]
github_url = "https://github.com/HudsonAlpha/aRNAPipe"

[trimgalore]
github_url = "https://github.com/FelixKrueger/TrimGalore"
#fastqc needed
[trimgalore.before_install]
linux = "pip install cutadapt"
mac = "pip install cutadapt"
[trimgalore.install]
linux = "mkdir -p {{destdir}}/bin; cp {{download.dir}}/trim_galore {{destdir}}/bin"
mac = "mkdir -p {{destdir}}/bin; cp {{download.dir}}/trim_galore {{destdir}}/bin"

[multiqc]
github_url = "https://github.com/ewels/MultiQC"
[multiqc.install]
linux = "pip install ."
mac = "pip install ."

[strawberry]
github_url = "https://github.com/ruolin/strawberry"
use_git2r = false
recursive_clone = true
[strawberry.install]
linux = "sh cmake.sh && cd build && make"
mac = "sh cmake.sh && cd build && make"

[fastp]
github_url = "https://github.com/OpenGene/fastp"
[fastp.install]
linux = "make; mkdir -p {{destdir}}/bin; cp {{download.dir}}/fastp {{destdir}}/bin"
mac = "make; mkdir -p {{destdir}}/bin; cp {{download.dir}}/fastp {{destdir}}/bin"

[olego]
github_url = "https://github.com/chaolinzhanglab/olego"
[olego.install]
linux = "make; mkdir -p {{destdir}}/bin; cd {{download.dir}}; cp olego olegoindex bed2junc.pl qualfa2fq.pl mergePEsam.pl sam2junctionread.pl xa2multi.pl solid2fastq.pl {{destdir}}/bin"
mac = "make; mkdir -p {{destdir}}/bin; cd {{download.dir}}; cp olego olegoindex bed2junc.pl qualfa2fq.pl mergePEsam.pl sam2junctionread.pl xa2multi.pl solid2fastq.pl {{destdir}}/bin"

[chronqc]
github_url = "https://github.com/nilesh-tawari/ChronQC"
[chronqc.install]
linux = "pip install -r requirements.txt && pip install --editable ."
mac = "pip install -r requirements.txt && pip install --editable ."

[dart]
github_url = "https://github.com/hsinnan75/DART"
[dart.install]
linux = "make; mkdir -p {{destdir}}/bin; cd {{download.dir}}; cp dart bwa_index {{destdir}}/bin"
mac = "make; mkdir -p {{destdir}}/bin; cd {{download.dir}}; cp dart bwa_index {{destdir}}/bin"

[rhat]
github_url = "https://github.com/HIT-Bioinformatics/rHAT"
make_dir = ["./src"]
[rhat.install]
linux = "make; mkdir -p {{destdir}}/bin; cp rHAT-aligner rHAT-indexer {{destdir}}/bin"
mac = "make; mkdir -p {{destdir}}/bin; cp rHAT-aligner rHAT-indexer {{destdir}}/bin"

[giggle]
github_url = "https://github.com/ryanlayer/giggle"
[giggle.install]
linux = ["make", "mkdir -p {{destdir}}/bin; cp bin/* {{destdir}}/bin"]
mac = ["make", "mkdir -p {{destdir}}/bin; cp bin/* {{destdir}}/bin"]

[facets]
github_url = "https://github.com/mskcc/facets"
[facets.install]
linux = "#R#devtools::install('.', build_vignettes = TRUE);devtools::install_github('mskcc/pctGCdata')#R#"
mac = "#R#devtools::install('.', build_vignettes = TRUE);devtools::install_github('mskcc/pctGCdata')#R#"

[resm]
github_url = "https://github.com/deweylab/RSEM"
[resm.install]
linux = "make;make ebseq; make install DESTDIR={{destdir}} prefix=''"
mac = "make;make ebseq; make install DESTDIR={{destdir}} prefix=''"
windows = "make cygwin=true; make ebseq; make install DESTDIR={{destdir}} prefix=''"

[radia]
github_url = "https://github.com/aradenbaugh/radia/"

[manta]
github_url = "https://github.com/Illumina/manta"
install = "mkdir build; cd build; ./configure --prefix `pwd`; make -C `pwd`; make install"

[jaffa]
github_url = "https://github.com/Oshlack/JAFFA"
install = "./install_linux64.sh"

[marvel]
github_url = "https://github.com/schloi/MARVEL"
install = ["autoreconf && ./configure --prefix={{destdir}} && make",
           "make install && echo 'export PYTHONPATH=$PYTHONPATH:{{destdir}}/lib.python' >> ~/.bashrc"]

[picky]
github_url = "https://github.com/TheJacksonLaboratory/Picky"

[freec]
github_url = "https://github.com/BoevaLab/FREEC"
make_dir = ["./src"]
install = "make; mkdir -p {{destdir}}/bin; cd {{download.dir}}; cp freec {{destdir}}/bin"

[oncodriveclust]
github_url = "https://bitbucket.org/bbglab/oncodriveclust/"
version_available = ["master"]
version_fixed = true
install = "pip install ."

[sequenza]
github_url = "https://bitbucket.org/sequenza_tools/sequenza-utils"
version_available = ["master"]
version_fixed = true
before_install = "#R#source('http://bioconductor.org/biocLite.R'); biocLite('copynumber'); install.packages('sequenza')#R#"
install = "pip install ."

[taxmaps]
github_url = "https://github.com/nygenome/taxmaps"

[svaba]
github_url = "https://github.com/walaj/svaba"
recursive_clone = true
install = ["./configure --prefix={{destdir}} && make", "make install"]

[rop]
github_url = "https://github.com/smangul1/rop"
install = "./install.sh"

[mrnn]
github_url = "https://github.com/hendrixlab/mRNN"

[snakemake_dna_gatk_flow]
github_url = "https://github.com/snakemake-workflows/dna-seq-gatk-variant-calling"

[spack]
github_url = "https://github.com/spack/spack"
[spack.install]
linux = "#R#cat('export SPACK_ROOT={{download.dir}}\nsource $SPACK_ROOT/share/spack/setup-env.sh', file = '~/.bashrc', append = TRUE)#R#"
mac = "#R#cat('export SPACK_ROOT={{download.dir}}\nsource $SPACK_ROOT/share/spack/setup-env.sh', file = '~/.bashrc', append = TRUE)#R#"
